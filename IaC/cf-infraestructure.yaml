Parameters:
  GitHubRepositoryUI:
    Type: String
    Default: akane34/challenge-aws-ui/master
    Description:  owner/repository/branch

  GitHubRepositorySendEmail:
    Type: String
    Default: akane34/challenge-aws-lambda-send-email/master
    Description:  owner/repository/branch

  GitHubRepositoryRegisterUser:
    Type: String
    Default: akane34/challenge-aws-lambda-register-user/master
    Description:  owner/repository/branch

  GitHubRepositoryCognitoTrigger:
    Type: String
    Default: akane34/challenge-aws-lambda-cognito-trigger/master
    Description:  owner/repository/branch

  GitHubRepositoryToken:
    Type: String
    Default: akane34/challenge-aws-lambda-token/master
    Description:  owner/repository/branch
  
  GitHubOAuthToken:
    Type: String
    Default:  GitHub OAuthToken Here
    Description:  CodePipeline requires an OAuthToken

  EmailSender:
    Type: String
    Default:  challenge.cloud@yopmail.com
    Description:  Email for send notifications
    
  Postfix:
    Type: String
    Default:  _1
    Description:  postfix

Resources:
  # --------------------------------------BEGIN FRONTEND ---------------------------------
  #Create AWS S3 Bucket  
  WebContentBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html      
        
  WebContentBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: WebContentBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebContentBucket
                  - /*
            Principal: '*'            
            
  #Create AWS CloudFront and associate to S3 Bucket
  WebContentCDN:
    Type: 'AWS::CloudFront::Distribution'
    DeletionPolicy: Delete
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt 
              - WebContentBucket
              - DomainName
            Id: WebContentS3Origin
            S3OriginConfig: {}
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: WebContentS3Origin
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: allow-all
          
  #Create CodePipeline Roles for deploy
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        'Fn::Join': [ '', ['CodeBuildRole', '-', !Ref 'AWS::StackName']]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal:
            Service: 'codebuild.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${WebContentBucket}/*
                  - Fn::Sub: arn:aws:s3:::${WebContentBucket}
          
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        'Fn::Join': [ '', ['CodePipelineRole', '-', !Ref 'AWS::StackName']]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal:
            Service: 'codepipeline.amazonaws.com'
          Action: 'sts:AssumeRole'
      
  #Create CodePipeline Policies          
  CodePipelinePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:
        'Fn::Join': [ '', ['CodePipelinePolicy', '-', !Ref 'AWS::StackName']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
          Resource:
            - '*'
      Roles:
        -  !Ref CodePipelineRole
    
  # CodePipeline with its stages:
  S3UI:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ '', ['sourcecode', "-", !Ref 'AWS::StackName']]
      
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Join [ '', ['DevOps-Pipeline', '-', !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3UI
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !Join [ '', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref CodePipelineRole  ] ]
      Stages:

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ '/' , !Ref GitHubRepositoryUI ]]
                Repo: !Select [1, !Split [ '/' , !Ref GitHubRepositoryUI ]]
                Branch: !Select [2, !Split [ '/' , !Ref GitHubRepositoryUI ]]
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCodeOutput
                
        # Stage 2:  Build and Deploy using Serverless Framework        
        - Name: Deploy
          Actions:
            - Name: S3DeployUI
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3UI
                Version: '1'
              InputArtifacts:
                - Name: SourceCodeOutput
              Configuration: 
                BucketName: !Ref WebContentBucket
                Extract: 'true'
              RunOrder: 2     
   
# --------------------------------------END FRONTEND ---------------------------------        

# --------------------------------------BEGIN BACKEND ---------------------------------
CodeBuildProject:
    DependsOn:
    - CodeBuildPolicy
    Properties:
      Artifacts:
        Location: !Ref 'ArtifactsBucket'
        Name: 'build-output.zip'
        NamespaceType: BUILD_ID
        Packaging: ZIP
        Path: 'codebuild'
        Type: S3
      Cache:
        Location: !Ref 'CacheBucket'
        Type: S3
      Description: !Join
        - ''
        - - 'CodeBuild Project for '
          - !Ref 'AWS::StackName'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
      Name: !Ref 'AWS::StackName'
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        Type: CODECOMMIT
        Location: !Join
          - ''
          - - 'https://git-codecommit.'
            - !Ref 'AWS::Region'
            - '.amazonaws.com/v1/repos/'
            - !Ref 'CodeCommitRepoName'
        BuildSpec: 'buildspecs/build-with-cache.yml'
    Type: AWS::CodeBuild::Project


# CodePipeline with its stages:
  S3SendEmail:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ '', ['sourcecode', "-email-", !Ref 'AWS::StackName']]
      
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Join [ '', ['DevOps-Pipeline', '-email-', !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3SendEmail
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !Join [ '', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref CodePipelineRole  ] ]
      Stages:

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ '/' , !Ref GitHubRepositorySendEmail ]]
                Repo: !Select [1, !Split [ '/' , !Ref GitHubRepositorySendEmail ]]
                Branch: !Select [2, !Split [ '/' , !Ref GitHubRepositorySendEmail ]]
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCodeEmailOutput
                
        # Stage 2:  Build and Deploy using Serverless Framework        
        - Name: Deploy
          Actions:
            - Name: S3DeployEmail
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3SendEmail
                Version: '1'
              InputArtifacts:
                - Name: SourceCodeEmailOutput
              Configuration: 
                BucketName: !Ref WebContentBucket
                Extract: 'true'
              RunOrder: 2     
   
# --------------------------------------END BACKEND ---------------------------------

Outputs:
  WebsiteURL:
    Value: !GetAtt [WebContentBucket, WebsiteURL]
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join ['', ['https://', !GetAtt [WebContentBucket, DomainName]]]
    Description: Name of S3 bucket to hold website content
  CloudFrontURL:
    Value: !Join ['', ['https://', !GetAtt [WebContentCDN, DomainName], '/index.html']]
    Description: Name of CloudFront URL
  Github:
    Value: !Ref GitHubRepository
    Description: GitHub repository